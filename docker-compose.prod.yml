version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: careerpathpro_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-careerpathpro}
      POSTGRES_USER: ${POSTGRES_USER:-careeruser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-careeruser} -d ${POSTGRES_DB:-careerpathpro}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - careerpathpro_network
    restart: unless-stopped

  # Backend API (Production)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: careerpathpro_backend_prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-careeruser}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-careerpathpro}
      DATABASE_URL_ASYNC: postgresql+asyncpg://${POSTGRES_USER:-careeruser}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-careerpathpro}
      ENVIRONMENT: production
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - careerpathpro_network
    restart: unless-stopped
    command: >
      sh -c "
        alembic upgrade head &&
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  # Frontend (Production)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: careerpathpro_frontend_prod
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - careerpathpro_network
    restart: unless-stopped

volumes:
  postgres_data_prod:

networks:
  careerpathpro_network:
    driver: bridge

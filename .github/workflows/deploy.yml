name: Deploy to AWS

on:
  workflow_dispatch:  # Only allow manual triggers
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: resumerepublic

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Terraform Init
      working-directory: ./infrastructure/terraform
      run: terraform init

    - name: Get secrets from Parameter Store
      id: get-secrets
      run: |
        # Get all secrets from Parameter Store
        SECRETS=$(aws ssm get-parameters-by-path --path "/${PROJECT_NAME}" --recursive --with-decryption --query 'Parameters[*].[Name,Value]' --output text)
        
        # Extract individual secrets
        echo "db_password=$(echo "$SECRETS" | grep "/database/password" | cut -f2)" >> $GITHUB_OUTPUT
        echo "secret_key=$(echo "$SECRETS" | grep "/app/secret_key" | cut -f2)" >> $GITHUB_OUTPUT
        echo "google_client_id=$(echo "$SECRETS" | grep "/google/client_id" | cut -f2)" >> $GITHUB_OUTPUT
        echo "google_client_secret=$(echo "$SECRETS" | grep "/google/client_secret" | cut -f2)" >> $GITHUB_OUTPUT
        echo "github_client_id=$(echo "$SECRETS" | grep "/github/client_id" | cut -f2)" >> $GITHUB_OUTPUT
        echo "github_client_secret=$(echo "$SECRETS" | grep "/github/client_secret" | cut -f2)" >> $GITHUB_OUTPUT
        echo "openrouter_api_key=$(echo "$SECRETS" | grep "/openrouter/api_key" | cut -f2)" >> $GITHUB_OUTPUT
        echo "openrouter_llm_model=$(echo "$SECRETS" | grep "/app/openrouter_llm_model" | cut -f2)" >> $GITHUB_OUTPUT
        echo "ssl_cipher_suites=$(echo "$SECRETS" | grep "/app/ssl_cipher_suites" | cut -f2)" >> $GITHUB_OUTPUT
        echo "min_tls_version=$(echo "$SECRETS" | grep "/app/min_tls_version" | cut -f2)" >> $GITHUB_OUTPUT
        echo "database_host=$(echo "$SECRETS" | grep "/database/host" | cut -f2)" >> $GITHUB_OUTPUT
        echo "database_name=$(echo "$SECRETS" | grep "/database/name" | cut -f2)" >> $GITHUB_OUTPUT
        echo "database_user=$(echo "$SECRETS" | grep "/database/user" | cut -f2)" >> $GITHUB_OUTPUT

    - name: Terraform Plan
      working-directory: ./infrastructure/terraform
      run: terraform plan -out=tfplan
      env:
        TF_VAR_db_password: ${{ steps.get-secrets.outputs.db_password }}
        TF_VAR_secret_key: ${{ steps.get-secrets.outputs.secret_key }}
        TF_VAR_google_client_id: ${{ steps.get-secrets.outputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ steps.get-secrets.outputs.google_client_secret }}
        TF_VAR_github_client_id: ${{ steps.get-secrets.outputs.github_client_id }}
        TF_VAR_github_client_secret: ${{ steps.get-secrets.outputs.github_client_secret }}
        TF_VAR_openrouter_api_key: ${{ steps.get-secrets.outputs.openrouter_api_key }}
        TF_VAR_openrouter_llm_model: ${{ steps.get-secrets.outputs.openrouter_llm_model }}
        TF_VAR_ssl_cipher_suites: ${{ steps.get-secrets.outputs.ssl_cipher_suites }}
        TF_VAR_min_tls_version: ${{ steps.get-secrets.outputs.min_tls_version }}
        TF_VAR_database_host: ${{ steps.get-secrets.outputs.database_host }}
        TF_VAR_database_name: ${{ steps.get-secrets.outputs.database_name }}
        TF_VAR_database_user: ${{ steps.get-secrets.outputs.database_user }}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      working-directory: ./infrastructure/terraform
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_db_password: ${{ steps.get-secrets.outputs.db_password }}
        TF_VAR_secret_key: ${{ steps.get-secrets.outputs.secret_key }}
        TF_VAR_google_client_id: ${{ steps.get-secrets.outputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ steps.get-secrets.outputs.google_client_secret }}
        TF_VAR_github_client_id: ${{ steps.get-secrets.outputs.github_client_id }}
        TF_VAR_github_client_secret: ${{ steps.get-secrets.outputs.github_client_secret }}
        TF_VAR_openrouter_api_key: ${{ steps.get-secrets.outputs.openrouter_api_key }}
        TF_VAR_openrouter_llm_model: ${{ steps.get-secrets.outputs.openrouter_llm_model }}
        TF_VAR_ssl_cipher_suites: ${{ steps.get-secrets.outputs.ssl_cipher_suites }}
        TF_VAR_min_tls_version: ${{ steps.get-secrets.outputs.min_tls_version }}
        TF_VAR_database_host: ${{ steps.get-secrets.outputs.database_host }}
        TF_VAR_database_name: ${{ steps.get-secrets.outputs.database_name }}
        TF_VAR_database_user: ${{ steps.get-secrets.outputs.database_user }}

    - name: Login to Amazon ECR
      if: github.ref == 'refs/heads/main'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image
      if: github.ref == 'refs/heads/main'
      working-directory: ./backend
      run: |
        ECR_REPO_URL=$(cd ../infrastructure/terraform && terraform output -raw ecr_repository_url)
        docker build -t $PROJECT_NAME-backend .
        docker tag $PROJECT_NAME-backend:latest $ECR_REPO_URL:latest
        docker push $ECR_REPO_URL:latest

    - name: Deploy frontend to S3
      if: github.ref == 'refs/heads/main'
      run: |
        S3_BUCKET=$(cd infrastructure/terraform && terraform output -raw s3_bucket_name)
        aws s3 sync frontend/dist/ s3://$S3_BUCKET --delete

    - name: Invalidate CloudFront
      if: github.ref == 'refs/heads/main'
      run: |
        S3_BUCKET=$(cd infrastructure/terraform && terraform output -raw s3_bucket_name)
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='$S3_BUCKET.s3-website-$AWS_REGION.amazonaws.com'].Id" --output text)
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

    - name: Update ECS service
      if: github.ref == 'refs/heads/main'
      run: |
        CLUSTER_NAME=$(cd infrastructure/terraform && terraform output -raw ecs_cluster_name)
        aws ecs update-service --cluster $CLUSTER_NAME --service $PROJECT_NAME-backend-service --force-new-deployment
